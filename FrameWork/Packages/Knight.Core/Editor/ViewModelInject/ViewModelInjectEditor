using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using Mono.Cecil;
using System.Linq;
using System;
using Mono.Cecil.Cil;
using System.Reflection;
using FieldAttributes = Mono.Cecil.FieldAttributes;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using System.Reflection.Emit;
using OpCodes = Mono.Cecil.Cil.OpCodes;
using System.Threading;
using System.IO;

namespace Knight.Core.Editor
{
    class ViewModelIbject_CustomBuildProcessor : IPostBuildPlayerScriptDLLs
    {
        public int callbackOrder { get { return 0; } }
        public void OnPostBuildPlayerScriptDLLs(BuildReport report)
        {
#if HOTFIX_DLL_USE
            Debug.Log("MyCustomBuildProcessor.OnPostBuildPlayerScriptDLLs for target " + report.summary.platform + " at path " + report.summary.outputPath);
            ViewModelInjectEditor.Inject_Path("Temp/StagingArea/Data/Managed/Game.Hotfix.dll", true);
#endif
        }
    }

    public class ViewModelInjectEditor
    {
        private static string mDLLPath = "Library/ScriptAssemblies/Game.Hotfix.dll";
        private static string mUIDLLPath = "Library/ScriptAssemblies/Framework.UI.dll";
        //private static string mCOREDLLPath = "Library/ScriptAssemblies/Core.dll";

        [MenuItem("Tools/Other/ViewModel Injector")]
        public static void Inject()
        {
            Inject_Path(mDLLPath, true);
        }

        public static void Inject_Path(string rDLLPath, bool bIsSymbols)
        {
            AssemblyDefinition rAssembly = null;
            AssemblyDefinition rUIAssembly = null;
            //AssemblyDefinition rCoreAssembly = null;

            try
            {
                // 取Assetmbly
                var readerParameters = new ReaderParameters { ReadSymbols = bIsSymbols, ReadWrite = true, };
                rAssembly = AssemblyDefinition.ReadAssembly(rDLLPath, readerParameters);
                rUIAssembly = AssemblyDefinition.ReadAssembly(mUIDLLPath, readerParameters);
                //rCoreAssembly = AssemblyDefinition.ReadAssembly(mCOREDLLPath, readerParameters);
                var rHotfixTemplateType = rAssembly.MainModule.GetType("Game.HotfixTemplate");
                var rField = rHotfixTemplateType.Fields.SingleOrDefault(f => f.Name.Equals("__Is_ViewModel_Injected__"));
                if (rField != null) return;

                rField = new FieldDefinition("__Is_ViewModel_Injected__", FieldAttributes.Static | FieldAttributes.Public, GetBoolValueTypeReference(rAssembly));
                rHotfixTemplateType.Fields.Add(rField);

                var rViewModelDataBindingTypes = rAssembly.MainModule
                    .GetTypes().Where(rType => rType != null &&
                                          rType.BaseType != null &&
                                          IsBaseTypeEquals(rUIAssembly, rType, "UnityEngine.UI.ViewModel"));

                var rViewModelTypeList = new List<TypeDefinition>(rViewModelDataBindingTypes);
                foreach (var rType in rViewModelTypeList)
                {
                    var rNeedInjectProps = rType.Properties.Where(rProp => rProp != null &&
                                                                           rProp.CustomAttributes.Any(rAttr => rAttr.AttributeType.FullName.Equals("UnityEngine.UI.DataBindingAttribute")));

                    var rNeedInjectPropList = new List<PropertyDefinition>(rNeedInjectProps);
                    foreach (var rProp in rNeedInjectPropList)
                    {
                        InjectType(rAssembly, rUIAssembly, rType, rProp.Name);
                        InjectTypeRefresh(rAssembly, rUIAssembly, rType, rProp.Name);
                    }
                }
                foreach (var rType in rViewModelTypeList)
                {
                    var rNeedInjectProps = rType.Properties.Where(rProp => rProp != null &&
                                                                           rProp.CustomAttributes.Any(rAttr => rAttr.AttributeType.FullName.Equals("UnityEngine.UI.DataBindingAttribute")
                                                                           || rAttr.AttributeType.FullName.Equals("UnityEngine.UI.DataBindingRelatedAttribute")));
                    var rNeedInjectPropDict = new Dict<TypeReference, List<PropertyDefinition>>();

                    var rDefaultTypeRefrence = rAssembly.MainModule.ImportReference(Type.GetType("System.Object"));
                    foreach (var item in rNeedInjectProps)
                    {
                        var rPropertyTypeType = GetType(item.PropertyType);
                        if (rPropertyTypeType == null)
                        {
                            rPropertyTypeType = rDefaultTypeRefrence;
                        }
                        if (!rNeedInjectPropDict.TryGetValue(rPropertyTypeType, out var rNeedInjectPropList))
                        {
                            rNeedInjectPropList = new List<PropertyDefinition>();
                            rNeedInjectPropDict.Add(rPropertyTypeType, rNeedInjectPropList);
                        }
                        rNeedInjectPropList.Add(item);
                    }

                    foreach (var rNeedInjectPropList in rNeedInjectPropDict)
                    {
                        InjectTypeGetPropValueMethod(rNeedInjectPropList.Key, rAssembly, rUIAssembly,/* rCoreAssembly,*/ rType, rNeedInjectPropList.Value);
                    }
                }


                foreach (var rType in rViewModelTypeList)
                {
                    var rNeedInjectProps = rType.Properties.Where(rProp => rProp != null &&
                                                                           rProp.CustomAttributes.Any(rAttr => rAttr.AttributeType.FullName.Equals("UnityEngine.UI.DataBindingAttribute")));
                }

                var rWriteParameters = new WriterParameters { WriteSymbols = bIsSymbols };
                rAssembly.Write(rWriteParameters);
                rAssembly.Dispose();
                rUIAssembly.Dispose();
                //rCoreAssembly.Dispose();
            }
            catch (Exception e)
            {
                LogManager.LogException(e);
            }
            finally
            {
                rAssembly?.Dispose();
                rUIAssembly?.Dispose();
                //rCoreAssembly?.Dispose();
            }
            UnityEngine.Debug.Log("ViewModel inject success!!!");
        }

        private static TypeReference GetType(TypeReference rTypeReference)
        {
            if (rTypeReference.FullName == "System.Int32")
            {
                return rTypeReference;
            }
            else if (rTypeReference.FullName == "System.Single")
            {
                return rTypeReference;
            }
            else if (rTypeReference.FullName == "System.Boolean")
            {
                return rTypeReference;
            }
            //else if (rTypeReference.FullName == "UnityEngine.Color")
            //{
            //    return rTypeReference;
            //}
            else if (rTypeReference.Name == "UnityEngine.Vector2")
            {
                return rTypeReference;
            }
            else if (rTypeReference.Name == "UnityEngine.Vector3")
            {
                return rTypeReference;
            }
            else if (rTypeReference.FullName == "System.String")
            {
                return rTypeReference;
            }
            LogManager.LogWarning($"没有类型{rTypeReference.Name}对应的PropChanged方法");
            return null;
        }

        #region HotfixTemplate获取基础类型引用
        private static TypeReference GetBoolValueTypeReference(AssemblyDefinition rAssembly)
        {
            var rHotfixTemplateType = rAssembly.MainModule.Types.SingleOrDefault(
                                        rType => rType != null &&
                                        rType.BaseType != null &&
                                        rType.FullName.Equals("Game.HotfixTemplate"));

            if (rHotfixTemplateType != null)
            {
                var rBoolValueField = rHotfixTemplateType.Fields.SingleOrDefault(
                                        rField => rField.Name.Equals("__Bool_Value_Template__"));
                return rBoolValueField.FieldType;
            }
            return null;
        }

        private static TypeReference GetValueTypeReference(AssemblyDefinition rAssembly,string rTypeName)
        {
            var rHotfixTemplateType = rAssembly.MainModule.Types.SingleOrDefault(
                                        rType => rType != null &&
                                        rType.BaseType != null &&
                                        rType.FullName.Equals("Game.HotfixTemplate"));

            if (rHotfixTemplateType != null)
            {
                var rRefreshMethod = rHotfixTemplateType.Methods.SingleOrDefault(
                                        rMethod => rMethod.Name.Equals(rTypeName));
                return rRefreshMethod.ReturnType;
            }
            return null;
        }

        //private static TypeReference GetPropValueMethodReference(AssemblyDefinition rAssembly)
        //{
        //    var rHotfixTemplateType = rAssembly.MainModule.Types.SingleOrDefault(
        //                                rType => rType != null &&
        //                                rType.BaseType != null &&
        //                                rType.FullName.Equals("Game.HotfixTemplate"));

        //    if (rHotfixTemplateType != null)
        //    {
        //        var rGetValueMethod = rHotfixTemplateType.Methods.SingleOrDefault(
        //                                rMethod => rMethod.Name.Equals("GetPropValue"));
        //        return rGetValueMethod.ReturnType;
        //    }
        //    return null;
        //}

        #endregion
        private static bool IsBaseTypeEquals(AssemblyDefinition rUIAssembly, TypeDefinition rType, string rTypeName)
        {
            var rTempType = GetBaseType(rUIAssembly, rType, rTypeName);
            return rTempType != null;
        }

        private static TypeDefinition GetBaseType(AssemblyDefinition rUIAssembly, TypeDefinition rType, string rTypeName)
        {
            var rTempType = rType.BaseType as TypeDefinition;
            if (rTempType == null && rType.BaseType.FullName.Equals(rTypeName))
            {
                rTempType = rUIAssembly.MainModule.Types.SingleOrDefault(t => t.FullName.Equals(rTypeName));
            }
            while (rTempType != null)
            {
                if (rTempType.FullName.Equals(rTypeName))
                {
                    break;
                }
                var rSrcTempType = rTempType;
                rTempType = rTempType.BaseType as TypeDefinition;
                if (rTempType == null && rSrcTempType.BaseType.FullName.Equals(rTypeName))
                {
                    rTempType = rUIAssembly.MainModule.Types.SingleOrDefault(t => t.FullName.Equals(rTypeName));
                }
            }
            return rTempType;
        }

        #region 注入属性PropChanged方法
        private static void InjectType(AssemblyDefinition rAssembly, AssemblyDefinition rUIAssembly, TypeDefinition rNeedInjectType, string rPropertyName)
        {
            if (rNeedInjectType == null) return;

            PropertyDefinition rNeedInjectProperty = rNeedInjectType.Properties.Single(t => t.Name == rPropertyName);
            if (rNeedInjectProperty == null)
            {
                Console.WriteLine("Can not find property " + rPropertyName);
                return;
            }

            var rBaseType = GetBaseType(rUIAssembly, rNeedInjectType, "UnityEngine.UI.ViewModel");

            var rPropChangedMethod = rBaseType.Methods.SingleOrDefault(t => t.Name == "PropChanged" && t.Parameters.Count == 2 && t.Parameters[1].ParameterType == rNeedInjectProperty.PropertyType);
            if (rPropChangedMethod == null)
            {
                LogManager.LogWarning($"没有PropertyType对应的PropChanged方法：rNeedInjectProperty.PropertyType = {rNeedInjectProperty.PropertyType}");
                rPropChangedMethod = rBaseType.Methods.SingleOrDefault(t => t.Name == "PropChanged" && t.Parameters.Count == 2 && t.Parameters[1].ParameterType.Name == "Object");
            }
            var rPropChangedMethodRef = rAssembly.MainModule.ImportReference(rPropChangedMethod);

            // 通过Inject Property的名字找到对应的Set方法
            var rNeedInjectPropertySetMethod = rNeedInjectType.Methods.SingleOrDefault(t => t.Name == "set_" + rPropertyName);
            InjectProperty(rAssembly, rNeedInjectType, rPropChangedMethodRef, rNeedInjectPropertySetMethod,rNeedInjectProperty, rPropertyName);
        }
        private static void InjectProperty(AssemblyDefinition rAssembly, TypeDefinition rNeedInjectType, MethodReference rPropChangedMethod, MethodDefinition rNeedInjectPropertySetMethod, PropertyDefinition rNeedInjectProperty, string rPropertyName)
        {
            if (rPropChangedMethod == null) return;
            if (rNeedInjectPropertySetMethod == null) return;

            var rPropertyDefinition = rNeedInjectType.Properties.SingleOrDefault((x) => { return x.Name == rPropertyName; });

            var nInstructCount = rNeedInjectPropertySetMethod.Body.Instructions.Count;
            var rStartInsertPoint = rNeedInjectPropertySetMethod.Body.Instructions[0];
            var rEndInsertPoint = rNeedInjectPropertySetMethod.Body.Instructions[nInstructCount - 1];
            var rProcessor = rNeedInjectPropertySetMethod.Body.GetILProcessor();

            var bNeedInjectCheck = false;
            // 目前只做基础类型与String类型的检测
            if (rNeedInjectProperty != null && (
                rNeedInjectProperty.PropertyType.IsPrimitive ||
                rNeedInjectProperty.PropertyType.FullName == "System.String"))
            {
                bNeedInjectCheck = true;
            }

            if (bNeedInjectCheck)
            {
                var rFieldDefinition = rNeedInjectType.Fields.SingleOrDefault(t => t.Name == $"<{rPropertyName}>k__BackingField");
                if (rFieldDefinition == null)
                {
                    bNeedInjectCheck = false;
                }
                else
                {
                    // 将参数入推送到计算堆栈
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ldarg_0));
                    // 将字段值推送到计算堆栈
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ldfld, rFieldDefinition));
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ldarg_1));
                    // 比较两个值。 如果这两个值相等，则将整数值 1 (int32) 推送到计算堆栈上；否则，将 0 (int32) 推送到计算堆栈上。
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ceq));
                    // 将 0 (int32)推送到计算堆栈
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ldc_I4_0));
                    // 比较两个值。 如果这两个值相等，则将整数值 1 (int32) 推送到计算堆栈上；否则，将 0 (int32) 推送到计算堆栈上。
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Ceq));
                    // 如果 value 为 false、空引用或零，则将控制转移到目标指令。
                    rProcessor.InsertBefore(rStartInsertPoint, rProcessor.Create(OpCodes.Brfalse_S, rEndInsertPoint));
                }
            }
            rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Ldarg_0));
            rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Ldstr, rPropertyName));

            rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Ldarg_1));
            if (GetType(rPropertyDefinition.PropertyType) == null)
            {
                rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Box, rPropertyDefinition.PropertyType));
            }
            rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Call, rPropChangedMethod));
            rProcessor.InsertBefore(rEndInsertPoint, rProcessor.Create(OpCodes.Nop));
        }
        #endregion

        #region 注入首次主动刷新属性代码
        private static void InjectTypeRefresh(AssemblyDefinition rAssembly, AssemblyDefinition rUIAssembly, TypeDefinition rNeedInjectType, string rPropertyName)
        {
            if (rNeedInjectType == null) return;

            PropertyDefinition rNeedInjectProperty = rNeedInjectType.Properties.Single(t => t.Name == rPropertyName);
            if (rNeedInjectProperty == null)
            {
                Console.WriteLine("Can not find property " + rPropertyName);
                return;
            }

            var rBaseType = GetBaseType(rUIAssembly, rNeedInjectType, "UnityEngine.UI.ViewModel");

            var rPropChangedMethod = rBaseType.Methods.SingleOrDefault(t => t.Name == "PropChanged" && t.Parameters.Count == 2 && t.Parameters[1].ParameterType == rNeedInjectProperty.PropertyType);
            if (rPropChangedMethod == null)
            {
                rPropChangedMethod = rBaseType.Methods.SingleOrDefault(t => t.Name == "PropChanged" && t.Parameters.Count == 2 && t.Parameters[1].ParameterType.Name == "Object");
            }
            var rPropChangedMethodRef = rAssembly.MainModule.ImportReference(rPropChangedMethod);

            var rPropRefreshMethod = rNeedInjectType.Methods.SingleOrDefault(t => t.Name == "RefreshViewModel");
            if (rPropRefreshMethod == null)
            {
                rPropRefreshMethod = new MethodDefinition("RefreshViewModel", Mono.Cecil.MethodAttributes.Public | Mono.Cecil.MethodAttributes.Virtual, rAssembly.MainModule.ImportReference(typeof(void)));
                var rProcessor = rPropRefreshMethod.Body.GetILProcessor();
                rPropRefreshMethod.Body.Instructions.Add(rProcessor.Create(OpCodes.Nop));
                rPropRefreshMethod.Body.Instructions.Add(rProcessor.Create(OpCodes.Ret));
                rNeedInjectType.Methods.Add(rPropRefreshMethod);
            }
            // 通过Inject Property的名字找到对应的Get方
            var rNeedInjectPropertyGetMethod = rNeedInjectType.Methods.SingleOrDefault(t => t.Name == "get_" + rPropertyName);
            var rPropertyDefinition = rNeedInjectType.Properties.SingleOrDefault((x) => { return x.Name == rPropertyName; });
            InjectPropertyRefresh(rAssembly,rPropChangedMethodRef, rPropRefreshMethod, rNeedInjectPropertyGetMethod, rPropertyName, rPropertyDefinition);

        }

        private static void InjectPropertyRefresh(AssemblyDefinition rAssembly, MethodReference rPropChangedMethod, MethodDefinition rNeedInjectPropertyRefreshMethod, MethodDefinition rNeedInjectPropertyGetMethod, string rPropertyName, PropertyDefinition rPropertyDefinition)
        {
            if (rPropChangedMethod == null) return;
            if (rNeedInjectPropertyRefreshMethod == null) return;
            if (rNeedInjectPropertyGetMethod == null) return;

            var nInstructCount = rNeedInjectPropertyRefreshMethod.Body.Instructions.Count;
            var rInsertPoint = rNeedInjectPropertyRefreshMethod.Body.Instructions[nInstructCount - 1];
            var rProcessor = rNeedInjectPropertyRefreshMethod.Body.GetILProcessor();

            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldarg_0));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldstr, rPropertyName));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldarg_0));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Call, rNeedInjectPropertyGetMethod));
            if (GetType(rPropertyDefinition.PropertyType) == null)
            {
                rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Box, rPropertyDefinition.PropertyType));
            }
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Call, rPropChangedMethod));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Nop));
        }
        #endregion

        #region 注入获取属性值代码
        private static void InjectTypeGetPropValueMethod(TypeReference rType, AssemblyDefinition rAssembly, AssemblyDefinition rUIAssembly,/* AssemblyDefinition rCoreAssembly,*/ TypeDefinition rNeedInjectType, List<PropertyDefinition> rNeedInjectPropList)
        {

            var rNeedInjectGetValueMethod = rNeedInjectType.Methods.SingleOrDefault(t => t.Name == $"GetPropValue_{rType.Name}");
            ILProcessor rProcessor;
            Instruction rInsertPoint;
            int nInstructCount;
            if (rNeedInjectGetValueMethod == null)
            {
                rNeedInjectGetValueMethod = new MethodDefinition($"GetPropValue_{rType.Name}", Mono.Cecil.MethodAttributes.Public | Mono.Cecil.MethodAttributes.Virtual, rType);
                rNeedInjectGetValueMethod.Parameters.Add(new ParameterDefinition(rAssembly.MainModule.ImportReference(typeof(string))));
                rProcessor = rNeedInjectGetValueMethod.Body.GetILProcessor();
                rProcessor.Body.Variables.Add(new VariableDefinition(rAssembly.MainModule.ImportReference(typeof(bool))));

                rProcessor.Body.Variables.Add(new VariableDefinition(rAssembly.MainModule.ImportReference(rType)));
                rProcessor.Body.Variables.Add(new VariableDefinition(rAssembly.MainModule.ImportReference(typeof(bool))));

                rNeedInjectGetValueMethod.Body.Instructions.Add(rProcessor.Create(OpCodes.Nop));

                rInsertPoint = rProcessor.Create(OpCodes.Ldloc_1);

                rNeedInjectGetValueMethod.Body.Instructions.Add(rInsertPoint);
                rNeedInjectGetValueMethod.Body.Instructions.Add(rProcessor.Create(OpCodes.Ret));

                rNeedInjectType.Methods.Add(rNeedInjectGetValueMethod);
            }
            nInstructCount = rNeedInjectGetValueMethod.Body.Instructions.Count;
            rInsertPoint = rNeedInjectGetValueMethod.Body.Instructions[nInstructCount - 2];
            // 通过Inject Property的名字找到对应的Equal方法
            System.Type[] paramTypes = new System.Type[2];
            paramTypes[0] = typeof(string);
            paramTypes[1] = typeof(string);
            var rStrEqualMethodRefrence = rAssembly.MainModule.ImportReference(typeof(string).GetMethod("Equals", paramTypes));


            nInstructCount = rNeedInjectGetValueMethod.Body.Instructions.Count;
            rProcessor = rNeedInjectGetValueMethod.Body.GetILProcessor();

            Instruction rNewInsertPoint = null;

            for (int i = 0; i < rNeedInjectPropList.Count; i++)
            {
                var rProp = rNeedInjectPropList[i];

                string rPropertyName = rProp.Name;
                if (rNeedInjectType == null) return;

                PropertyDefinition rNeedInjectProperty = rNeedInjectType.Properties.Single(t => t.Name == rPropertyName);
                if (rNeedInjectProperty == null)
                {
                    Console.WriteLine("Can not find property " + rPropertyName);
                    return;
                }


                var rNeedInjectPropertyGetMethod = rNeedInjectType.Methods.SingleOrDefault(t => t.Name == "get_" + rPropertyName);
                var rPropertyDefinition = rNeedInjectType.Properties.SingleOrDefault(x => x.Name == rPropertyName);
                if (rNeedInjectGetValueMethod == null) return;
                if (rStrEqualMethodRefrence == null) return;

                //上一个if的跳转(跳转到当前if开头)

                var rLdarg1Instruction = rProcessor.Create(OpCodes.Ldarg_1);
                if (rNewInsertPoint != null)
                {
                    rProcessor.InsertBefore(rNewInsertPoint, rProcessor.Create(OpCodes.Brfalse_S, rLdarg1Instruction));
                }

                rProcessor.InsertBefore(rInsertPoint, rLdarg1Instruction);

                rNewInsertPoint = InjectPropGetValue(!rType.IsValueType, rNeedInjectGetValueMethod, rProcessor, rInsertPoint, rStrEqualMethodRefrence, rPropertyName, rNeedInjectPropertyGetMethod, rPropertyDefinition);
            }
            //最后一个跳转到return null;
            
            var rLdnullInstruction = InjectPropGetValue(rType, rInsertPoint, rProcessor, rAssembly);
            if (rNewInsertPoint != null)
            {
                rProcessor.InsertBefore(rNewInsertPoint, rProcessor.Create(OpCodes.Brfalse_S, rLdnullInstruction));
            }

            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Stloc_1));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Br, rInsertPoint));
        }

        private static Instruction InjectPropGetValue(TypeReference rTypeReference, Instruction rInsertPoint, ILProcessor rProcessor, AssemblyDefinition rAssembly)
        {
            Instruction rDefaultInstruction = null;

            if (rTypeReference.FullName == "System.Int32")
            {
                rDefaultInstruction = rProcessor.Create(OpCodes.Ldc_I4_0);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            else if (rTypeReference.FullName == "System.Single")
            {
                rDefaultInstruction = rProcessor.Create(OpCodes.Ldc_I4_0);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            else if (rTypeReference.FullName == "System.Boolean")
            {
                rDefaultInstruction = rProcessor.Create(OpCodes.Ldc_I4_0);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            //else if (rTypeReference.FullName == "UnityEngine.Color")
            //{
            //    var rFunc = rAssembly.MainModule.ImportReference((typeof(UnityEngine.Color)));
            //    rDefaultInstruction = rProcessor.Create(OpCodes.Initobj, rFunc);
            //    rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            //}
            else if (rTypeReference.FullName == "UnityEngine.Vector2")
            {
                var rFunc = rAssembly.MainModule.ImportReference((typeof(UnityEngine.Vector2)));
                rDefaultInstruction = rProcessor.Create(OpCodes.Initobj, rFunc);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            else if (rTypeReference.FullName == "UnityEngine.Vector3")
            {
                var rFunc = rAssembly.MainModule.ImportReference((typeof(UnityEngine.Vector3)));
                rDefaultInstruction = rProcessor.Create(OpCodes.Initobj, rFunc);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            else if (rTypeReference.FullName == "System.String")
            {
                rDefaultInstruction = rProcessor.Create(OpCodes.Ldnull);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }
            else
            {
                rDefaultInstruction = rProcessor.Create(OpCodes.Ldnull);
                rProcessor.InsertBefore(rInsertPoint, rDefaultInstruction);
            }

            //默认return null;

            return rDefaultInstruction;
        }

        private static Instruction InjectPropGetValue(bool bIsObjectType, MethodDefinition rNeedInjectGetValueMethod, ILProcessor rProcessor, Instruction rInsertPoint, MethodReference rStrEqualMethodRefrence, string rPropertyName, MethodDefinition rNeedInjectPropertyGetMethod, PropertyDefinition rPropertyDefinition)
        {
            var rNewInsertPoint = rProcessor.Create(OpCodes.Nop);
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldstr, rPropertyName));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Call, rStrEqualMethodRefrence));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Stloc_0));

            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldloc_0));
            //插入跳转语句
            //rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Brfalse_S,rLdarg1Instruction));

            rProcessor.InsertBefore(rInsertPoint, rNewInsertPoint);
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Ldarg_0));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Call, rNeedInjectPropertyGetMethod));
            if (bIsObjectType)
                rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Box, rPropertyDefinition.PropertyType));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Stloc_1));
            rProcessor.InsertBefore(rInsertPoint, rProcessor.Create(OpCodes.Br, rInsertPoint));

            return rNewInsertPoint;
        }
        #endregion

    }
}